{
  "!type": "Form",
  "_uuid": "9493097355fe4fe5b610c95deb63874b",
  "HTML": "",
  "attributes": "",
  "background": "#ffffff",
  "backgroundimage": "",
  "borderColor": "",
  "borderStyle": "",
  "borderWidth": "",
  "cached_js": "mobiscroll.setOptions({\n    theme: 'ios',\n    themeVariant: 'light'\n});\n\nvar oldEvent,\n    tempEvent = {},\n    deleteEvent,\n    restoreEvent,\n    colorPicker,\n    tempColor,\n    titleInput = document.getElementById('event-title'),\n    descriptionTextarea = document.getElementById('event-desc'),\n    allDaySwitch = document.getElementById('event-all-day'),\n    freeSegmented = document.getElementById('event-status-free'),\n    busySegmented = document.getElementById('event-status-busy'),\n    deleteButton = document.getElementById('event-delete'),\n    colorSelect = document.getElementById('event-color-picker'),\n    pickedColor = document.getElementById('event-color'),\n    colorElms = document.querySelectorAll('.crud-color-c'),\n    datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    },\n    datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    },\n    myData = [{\n        id: 1,\n        start: '2021-12-08T13:00',\n        end: '2021-12-08T13:45',\n        title: 'Lunch @ Butcher\\'s',\n        description: '',\n        allDay: false,\n        free: true,\n        color: '#009788'\n    }, {\n        id: 2,\n        start: '2021-12-03T15:00',\n        end: '2021-12-03T16:00',\n        title: 'General orientation',\n        description: '',\n        allDay: false,\n        free: false,\n        color: '#ff9900'\n    }, {\n        id: 3,\n        start: '2021-12-02T18:00',\n        end: '2021-12-02T22:00',\n        title: 'Dexter BD',\n        description: '',\n        allDay: false,\n        free: true,\n        color: '#3f51b5'\n    }, {\n        id: 4,\n        start: '2021-12-04T10:30',\n        end: '2021-12-04T11:30',\n        title: 'Stakeholder mtg.',\n        description: '',\n        allDay: false,\n        free: false,\n        color: '#f44437'\n    }];\n\nfunction createAddPopup(elm) {\n    // hide delete button inside add popup\n    deleteButton.style.display = 'none';\n\n    deleteEvent = true;\n    restoreEvent = false;\n\n    // set popup header text and buttons for adding\n    popup.setOptions({\n        headerText: 'New event',\n        buttons: ['cancel', {\n            text: 'Add',\n            keyCode: 'enter',\n            handler: function () {\n                calendar.updateEvent({\n                    id: tempEvent.id,\n                    title: tempEvent.title,\n                    description: tempEvent.description,\n                    allDay: tempEvent.allDay,\n                    start: tempEvent.start,\n                    end: tempEvent.end,\n                    color: tempEvent.color,\n                });\n\n                // navigate the calendar to the correct view\n                calendar.navigate(tempEvent.start);\n\n                deleteEvent = false;\n                popup.close();\n            },\n            cssClass: 'mbsc-popup-button-primary'\n        }]\n    });\n\n    // fill popup with a new event data\n    mobiscroll.getInst(titleInput).value = tempEvent.title;\n    mobiscroll.getInst(descriptionTextarea).value = '';\n    mobiscroll.getInst(allDaySwitch).checked = true;\n    range.setVal([tempEvent.start, tempEvent.end]);\n    mobiscroll.getInst(busySegmented).checked = true;\n    range.setOptions({ controls: ['date'], responsive: datePickerResponsive });\n    pickedColor.style.background = '';\n\n    // set anchor for the popup\n    popup.setOptions({ anchor: elm });\n\n    popup.open();\n}\n\nfunction createEditPopup(args) {\n    var ev = args.event;\n\n    // show delete button inside edit popup\n    deleteButton.style.display = 'block';\n\n    deleteEvent = false;\n    restoreEvent = true;\n\n    // set popup header text and buttons for editing\n    popup.setOptions({\n        headerText: 'Edit event',\n        buttons: ['cancel', {\n            text: 'Save',\n            keyCode: 'enter',\n            handler: function () {\n                var date = range.getVal();\n                // update event with the new properties on save button click\n                calendar.updateEvent({\n                    id: ev.id,\n                    title: titleInput.value,\n                    description: descriptionTextarea.value,\n                    allDay: mobiscroll.getInst(allDaySwitch).checked,\n                    start: date[0],\n                    end: date[1],\n                    free: mobiscroll.getInst(freeSegmented).checked,\n                    color: ev.color,\n                });\n\n                // navigate the calendar to the correct view\n                calendar.navigate(date[0]);;\n\n                restoreEvent = false;\n                popup.close();\n            },\n            cssClass: 'mbsc-popup-button-primary'\n        }]\n    });\n\n    // fill popup with the selected event data\n    mobiscroll.getInst(titleInput).value = ev.title || '';\n    mobiscroll.getInst(descriptionTextarea).value = ev.description || '';\n    mobiscroll.getInst(allDaySwitch).checked = ev.allDay || false;\n    range.setVal([ev.start, ev.end]);\n    pickedColor.style.background = ev.color || '';\n\n    if (ev.free) {\n        mobiscroll.getInst(freeSegmented).checked = true;\n    } else {\n        mobiscroll.getInst(busySegmented).checked = true;\n    }\n\n    // change range settings based on the allDay\n    range.setOptions({\n        controls: ev.allDay ? ['date'] : ['datetime'],\n        responsive: ev.allDay ? datePickerResponsive : datetimePickerResponsive\n    });\n\n    // set anchor for the popup\n    popup.setOptions({ anchor: args.domEvent.currentTarget });\n    popup.open();\n}\n\nvar calendar = mobiscroll.eventcalendar('#demo-add-delete-event', {\n    clickToCreate: 'double',\n    dragToCreate: true,\n    dragToMove: true,\n    dragToResize: true,\n    view: {\n        calendar: { labels: true }\n    },\n    data: myData,\n    onEventClick: function (args) {\n        oldEvent = Object.assign({}, args.event);\n        tempEvent = args.event;\n\n        if (!popup.isVisible()) {\n            createEditPopup(args);\n        }\n    },\n    onEventCreated: function (args) {\n        popup.close();\n        // store temporary event\n        tempEvent = args.event;\n        createAddPopup(args.target);\n    },\n    onEventDeleted: function () {\n        mobiscroll.snackbar({            button: {\n                action: function () {\n                    calendar.addEvent(args.event);\n                },\n                text: 'Undo'\n            },\n            message: 'Event deleted'\n        });\n    }\n});\n\nvar popup = mobiscroll.popup('#demo-add-popup', {\n    display: 'bottom',\n    contentPadding: false,\n    fullScreen: true,\n    onClose: function () {\n        if (deleteEvent) {\n            calendar.removeEvent(tempEvent);\n        } else if (restoreEvent) {\n            calendar.updateEvent(oldEvent);\n        }\n    },\n    responsive: {\n        medium: {\n            display: 'anchored',\n            width: 400,\n            fullScreen: false,\n            touchUi: false\n        }\n    }\n});\n\ntitleInput.addEventListener('input', function (ev) {\n    // update current event's title\n    tempEvent.title = ev.target.value;\n});\n\ndescriptionTextarea.addEventListener('change', function (ev) {\n    // update current event's title\n    tempEvent.description = ev.target.value;\n});\n\nallDaySwitch.addEventListener('change', function () {\n    var checked = this.checked\n    // change range settings based on the allDay\n    range.setOptions({\n        controls: checked ? ['date'] : ['datetime'],\n        responsive: checked ? datePickerResponsive : datetimePickerResponsive\n    });\n\n    // update current event's allDay property\n    tempEvent.allDay = checked;\n});\n\nvar range = mobiscroll.datepicker('#event-date', {\n    controls: ['date'],\n    select: 'range',\n    startInput: '#start-input',\n    endInput: '#end-input',\n    showRangeLabels: false,\n    touchUi: true,\n    responsive: datePickerResponsive,\n    onChange: function (args) {\n        var date = args.value;\n        // update event's start date\n        tempEvent.start = date[0];\n        tempEvent.end = date[1];\n    }\n});\n\ndocument.querySelectorAll('input[name=event-status]').forEach(function (elm) {\n    elm.addEventListener('change', function () {\n        // update current event's free property\n        tempEvent.free = mobiscroll.getInst(freeSegmented).checked;\n    });\n});\n\ndeleteButton.addEventListener('click', function () {\n    // delete current event on button click\n    calendar.removeEvent(oldEvent);\n    popup.close();\n\n    // save a local reference to the deleted event\n    var deletedEvent = tempEvent;\n\n    mobiscroll.snackbar({        button: {\n            action: function () {\n                calendar.addEvent(deletedEvent);\n            },\n            text: 'Undo'\n        },\n        message: 'Event deleted'\n    });\n});\n\ncolorPicker = mobiscroll.popup('#demo-event-color', {\n    display: 'bottom',\n    contentPadding: false,\n    showArrow: false,\n    showOverlay: false,\n    buttons: [\n        'cancel',\n        {\n            text: 'Set',\n            keyCode: 'enter',\n            handler: function (ev) {\n                setSelectedColor();\n            },\n            cssClass: 'mbsc-popup-button-primary'\n        }\n    ],\n    responsive: {\n        medium: {\n            display: 'anchored',\n            anchor: document.getElementById('event-color-cont'),\n            buttons: {}\n        }\n    }\n});\n\nfunction selectColor(color, setColor) {\n    var selectedElm = document.querySelector('.crud-color-c.selected');\n    var newSelected = document.querySelector('.crud-color-c[data-value=\"' + color + '\"]');\n\n    if (selectedElm) {\n        selectedElm.classList.remove('selected')\n    }\n    if (newSelected) {\n        newSelected.classList.add('selected')\n    }\n    if (setColor) {\n        pickedColor.style.background = color || '';\n    }\n}\n\nfunction setSelectedColor() {\n    tempEvent.color = tempColor;\n    pickedColor.style.background = tempColor;\n    colorPicker.close();\n}\n\ncolorSelect.addEventListener('click', function () {\n    selectColor(tempEvent.color || '');\n    colorPicker.open();\n});\n\ncolorElms.forEach(function (elm) {\n    elm.addEventListener('click', function () {\n        tempColor = elm.getAttribute('data-value');\n        selectColor(tempColor);\n\n        if (!colorPicker.s.buttons.length) {\n            setSelectedColor();\n        }\n    });\n});\nbtnNotes.onclick=function(){\n  ChangeForm(notesForm)\n}\n",
  "cached_js_script_hash": "62395d0a2762b8c59e837761ca5bf330",
  "children": [
    {
      "!type": "HTMLview",
      "_uuid": "fe170e3153b54228b7a187c68b34a916",
      "backgroundColor": "",
      "borderColor": "",
      "borderStyle": "",
      "borderWidth": "",
      "bottom": "auto",
      "cached_js": "",
      "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e",
      "children": [],
      "class": "",
      "color": "",
      "contenteditable": "",
      "disabled": "",
      "display": "",
      "expanded_pmp": true,
      "fontFamily": "",
      "fontSize": "",
      "fontStyle": "",
      "fontWeight": "",
      "height": "800",
      "hidden": "",
      "id": "HTMLview3",
      "innerHTML": "<div id=\"demo-add-delete-event\"></div>\n\n<div id=\"demo-add-popup\">\n    <div class=\"mbsc-form-group\">\n        <label>\n            Title\n            <input mbsc-input id=\"event-title\">\n        </label>\n        <label>\n            Description\n            <textarea mbsc-textarea id=\"event-desc\"></textarea>\n        </label>\n    </div>\n    <div class=\"mbsc-form-group\">\n        <label>\n            All-day\n            <input mbsc-switch id=\"event-all-day\" type=\"checkbox\" />\n        </label>\n        <label>\n            Starts\n            <input mbsc-input id=\"start-input\" />\n        </label>\n        <label>\n            Ends\n            <input mbsc-input id=\"end-input\" />\n        </label>\n        <div id=\"event-date\"></div>\n        <div id=\"event-color-picker\" class=\"event-color-c\">\n            <div class=\"event-color-label\">Color</div>\n            <div id=\"event-color-cont\">\n                <div id=\"event-color\" class=\"event-color\"></div>\n            </div>\n        </div>\n        <label>\n            Show as busy\n            <input id=\"event-status-busy\" mbsc-segmented type=\"radio\" name=\"event-status\" value=\"busy\">\n        </label>\n        <label>\n            Show as free\n            <input id=\"event-status-free\" mbsc-segmented type=\"radio\" name=\"event-status\" value=\"free\">\n        </label>\n        <div class=\"mbsc-button-group\">\n            <button class=\"mbsc-button-block\" id=\"event-delete\" mbsc-button data-color=\"danger\" data-variant=\"outline\">Delete event</button>\n        </div>\n    </div>\n</div>\n\n<div id=\"demo-event-color\">\n    <div class=\"crud-color-row\">\n        <div class=\"crud-color-c\" data-value=\"#ffeb3c\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#ffeb3c\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"#ff9900\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#ff9900\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"#f44437\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#f44437\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"#ea1e63\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#ea1e63\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"#9c26b0\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#9c26b0\"></div>\n        </div>\n    </div>\n    <div class=\"crud-color-row\">\n        <div class=\"crud-color-c\" data-value=\"#3f51b5\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#3f51b5\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"#009788\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#009788\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"#4baf4f\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#4baf4f\"></div>\n        </div>\n        <div class=\"crud-color-c\" data-value=\"#7e5d4e\">\n            <div class=\"crud-color mbsc-icon mbsc-font-icon mbsc-icon-material-check\" style=\"background:#7e5d4e\"></div>\n        </div>\n    </div>\n</div>",
      "left": "auto",
      "name": "",
      "onchange": "",
      "onclick": "",
      "oncopy": "",
      "oncut": "",
      "onfocusin": "",
      "onfocusout": "",
      "oninput": "",
      "onmousedown": "",
      "onmousemove": "",
      "onmouseout": "",
      "onmouseup": "",
      "onpaste": "",
      "onresize": "",
      "ontouchend": "",
      "ontouchmove": "",
      "ontouchstart": "",
      "overflow": "auto",
      "required": "",
      "right": "auto",
      "script": "",
      "scroll_options": "mouseWheel:true, bounce: false, zoom:true",
      "scrolling": "false",
      "style": "",
      "top": "auto",
      "width": "500"
    },
    {
      "!type": "Button_bs4",
      "_uuid": "4938c99eda3641e49d578cfac61df12c",
      "ChangeForm": "",
      "appearance": " btn-secondary",
      "backgroundColor": "",
      "badge": "",
      "badgeAppearance": " badge-info",
      "blockLevel": "",
      "borderColor": "",
      "borderStyle": "",
      "borderWidth": "",
      "bottom": "auto",
      "cached_js": "",
      "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e",
      "children": [],
      "class": "",
      "color": "",
      "disabled": "",
      "display": "",
      "expanded_pmp": true,
      "fontFamily": "",
      "fontSize": "",
      "fontStyle": "",
      "fontWeight": "",
      "groupStyle": "",
      "grouping": "",
      "height": "auto",
      "hidden": "",
      "icon": "",
      "iconTitle": "",
      "id": "btnNotes",
      "left": 135,
      "mAll": "",
      "mBottom": "",
      "mLeft": "",
      "mRight": "",
      "mTop": "",
      "onclick": "btnNotes.onclick()",
      "onmousedown": "",
      "onmousemove": "",
      "onmouseout": "",
      "onmouseup": "",
      "onresize": "",
      "ontouchend": "",
      "ontouchmove": "",
      "ontouchstart": "",
      "outline": "",
      "pAll": "",
      "pBottom": "",
      "pLeft": "",
      "pRight": "",
      "pTop": "",
      "popBody": "Body",
      "popClose": "hover",
      "popPosition": "",
      "popStyle": "popover",
      "popTitle": "Title",
      "right": "auto",
      "script": "",
      "size": " btn-md",
      "style": "",
      "toggleControl": "",
      "top": 426,
      "value": "Back to Notes",
      "width": "auto"
    }
  ],
  "class": "",
  "designHeight": 0,
  "designWidth": 0,
  "expanded_pmp": true,
  "fullScreen": "true",
  "height": "500",
  "id": "interactiveCalendar",
  "language": "JavaScript",
  "left": "0",
  "locked": false,
  "modal": "false",
  "onhide": "",
  "onkeypress": "",
  "onresize": "",
  "onshow": "",
  "openMode": "none",
  "parentForm": "",
  "position": "absolute",
  "script": "mobiscroll.setOptions({\n    theme: 'ios',\n    themeVariant: 'light'\n});\n\nvar oldEvent,\n    tempEvent = {},\n    deleteEvent,\n    restoreEvent,\n    colorPicker,\n    tempColor,\n    titleInput = document.getElementById('event-title'),\n    descriptionTextarea = document.getElementById('event-desc'),\n    allDaySwitch = document.getElementById('event-all-day'),\n    freeSegmented = document.getElementById('event-status-free'),\n    busySegmented = document.getElementById('event-status-busy'),\n    deleteButton = document.getElementById('event-delete'),\n    colorSelect = document.getElementById('event-color-picker'),\n    pickedColor = document.getElementById('event-color'),\n    colorElms = document.querySelectorAll('.crud-color-c'),\n    datePickerResponsive = {\n        medium: {\n            controls: ['calendar'],\n            touchUi: false\n        }\n    },\n    datetimePickerResponsive = {\n        medium: {\n            controls: ['calendar', 'time'],\n            touchUi: false\n        }\n    },\n    myData = [{\n        id: 1,\n        start: '2021-12-08T13:00',\n        end: '2021-12-08T13:45',\n        title: 'Lunch @ Butcher\\'s',\n        description: '',\n        allDay: false,\n        free: true,\n        color: '#009788'\n    }, {\n        id: 2,\n        start: '2021-12-03T15:00',\n        end: '2021-12-03T16:00',\n        title: 'General orientation',\n        description: '',\n        allDay: false,\n        free: false,\n        color: '#ff9900'\n    }, {\n        id: 3,\n        start: '2021-12-02T18:00',\n        end: '2021-12-02T22:00',\n        title: 'Dexter BD',\n        description: '',\n        allDay: false,\n        free: true,\n        color: '#3f51b5'\n    }, {\n        id: 4,\n        start: '2021-12-04T10:30',\n        end: '2021-12-04T11:30',\n        title: 'Stakeholder mtg.',\n        description: '',\n        allDay: false,\n        free: false,\n        color: '#f44437'\n    }];\n\nfunction createAddPopup(elm) {\n    // hide delete button inside add popup\n    deleteButton.style.display = 'none';\n\n    deleteEvent = true;\n    restoreEvent = false;\n\n    // set popup header text and buttons for adding\n    popup.setOptions({\n        headerText: 'New event',\n        buttons: ['cancel', {\n            text: 'Add',\n            keyCode: 'enter',\n            handler: function () {\n                calendar.updateEvent({\n                    id: tempEvent.id,\n                    title: tempEvent.title,\n                    description: tempEvent.description,\n                    allDay: tempEvent.allDay,\n                    start: tempEvent.start,\n                    end: tempEvent.end,\n                    color: tempEvent.color,\n                });\n\n                // navigate the calendar to the correct view\n                calendar.navigate(tempEvent.start);\n\n                deleteEvent = false;\n                popup.close();\n            },\n            cssClass: 'mbsc-popup-button-primary'\n        }]\n    });\n\n    // fill popup with a new event data\n    mobiscroll.getInst(titleInput).value = tempEvent.title;\n    mobiscroll.getInst(descriptionTextarea).value = '';\n    mobiscroll.getInst(allDaySwitch).checked = true;\n    range.setVal([tempEvent.start, tempEvent.end]);\n    mobiscroll.getInst(busySegmented).checked = true;\n    range.setOptions({ controls: ['date'], responsive: datePickerResponsive });\n    pickedColor.style.background = '';\n\n    // set anchor for the popup\n    popup.setOptions({ anchor: elm });\n\n    popup.open();\n}\n\nfunction createEditPopup(args) {\n    var ev = args.event;\n\n    // show delete button inside edit popup\n    deleteButton.style.display = 'block';\n\n    deleteEvent = false;\n    restoreEvent = true;\n\n    // set popup header text and buttons for editing\n    popup.setOptions({\n        headerText: 'Edit event',\n        buttons: ['cancel', {\n            text: 'Save',\n            keyCode: 'enter',\n            handler: function () {\n                var date = range.getVal();\n                // update event with the new properties on save button click\n                calendar.updateEvent({\n                    id: ev.id,\n                    title: titleInput.value,\n                    description: descriptionTextarea.value,\n                    allDay: mobiscroll.getInst(allDaySwitch).checked,\n                    start: date[0],\n                    end: date[1],\n                    free: mobiscroll.getInst(freeSegmented).checked,\n                    color: ev.color,\n                });\n\n                // navigate the calendar to the correct view\n                calendar.navigate(date[0]);;\n\n                restoreEvent = false;\n                popup.close();\n            },\n            cssClass: 'mbsc-popup-button-primary'\n        }]\n    });\n\n    // fill popup with the selected event data\n    mobiscroll.getInst(titleInput).value = ev.title || '';\n    mobiscroll.getInst(descriptionTextarea).value = ev.description || '';\n    mobiscroll.getInst(allDaySwitch).checked = ev.allDay || false;\n    range.setVal([ev.start, ev.end]);\n    pickedColor.style.background = ev.color || '';\n\n    if (ev.free) {\n        mobiscroll.getInst(freeSegmented).checked = true;\n    } else {\n        mobiscroll.getInst(busySegmented).checked = true;\n    }\n\n    // change range settings based on the allDay\n    range.setOptions({\n        controls: ev.allDay ? ['date'] : ['datetime'],\n        responsive: ev.allDay ? datePickerResponsive : datetimePickerResponsive\n    });\n\n    // set anchor for the popup\n    popup.setOptions({ anchor: args.domEvent.currentTarget });\n    popup.open();\n}\n\nvar calendar = mobiscroll.eventcalendar('#demo-add-delete-event', {\n    clickToCreate: 'double',\n    dragToCreate: true,\n    dragToMove: true,\n    dragToResize: true,\n    view: {\n        calendar: { labels: true }\n    },\n    data: myData,\n    onEventClick: function (args) {\n        oldEvent = Object.assign({}, args.event);\n        tempEvent = args.event;\n\n        if (!popup.isVisible()) {\n            createEditPopup(args);\n        }\n    },\n    onEventCreated: function (args) {\n        popup.close();\n        // store temporary event\n        tempEvent = args.event;\n        createAddPopup(args.target);\n    },\n    onEventDeleted: function () {\n        mobiscroll.snackbar({            button: {\n                action: function () {\n                    calendar.addEvent(args.event);\n                },\n                text: 'Undo'\n            },\n            message: 'Event deleted'\n        });\n    }\n});\n\nvar popup = mobiscroll.popup('#demo-add-popup', {\n    display: 'bottom',\n    contentPadding: false,\n    fullScreen: true,\n    onClose: function () {\n        if (deleteEvent) {\n            calendar.removeEvent(tempEvent);\n        } else if (restoreEvent) {\n            calendar.updateEvent(oldEvent);\n        }\n    },\n    responsive: {\n        medium: {\n            display: 'anchored',\n            width: 400,\n            fullScreen: false,\n            touchUi: false\n        }\n    }\n});\n\ntitleInput.addEventListener('input', function (ev) {\n    // update current event's title\n    tempEvent.title = ev.target.value;\n});\n\ndescriptionTextarea.addEventListener('change', function (ev) {\n    // update current event's title\n    tempEvent.description = ev.target.value;\n});\n\nallDaySwitch.addEventListener('change', function () {\n    var checked = this.checked\n    // change range settings based on the allDay\n    range.setOptions({\n        controls: checked ? ['date'] : ['datetime'],\n        responsive: checked ? datePickerResponsive : datetimePickerResponsive\n    });\n\n    // update current event's allDay property\n    tempEvent.allDay = checked;\n});\n\nvar range = mobiscroll.datepicker('#event-date', {\n    controls: ['date'],\n    select: 'range',\n    startInput: '#start-input',\n    endInput: '#end-input',\n    showRangeLabels: false,\n    touchUi: true,\n    responsive: datePickerResponsive,\n    onChange: function (args) {\n        var date = args.value;\n        // update event's start date\n        tempEvent.start = date[0];\n        tempEvent.end = date[1];\n    }\n});\n\ndocument.querySelectorAll('input[name=event-status]').forEach(function (elm) {\n    elm.addEventListener('change', function () {\n        // update current event's free property\n        tempEvent.free = mobiscroll.getInst(freeSegmented).checked;\n    });\n});\n\ndeleteButton.addEventListener('click', function () {\n    // delete current event on button click\n    calendar.removeEvent(oldEvent);\n    popup.close();\n\n    // save a local reference to the deleted event\n    var deletedEvent = tempEvent;\n\n    mobiscroll.snackbar({        button: {\n            action: function () {\n                calendar.addEvent(deletedEvent);\n            },\n            text: 'Undo'\n        },\n        message: 'Event deleted'\n    });\n});\n\ncolorPicker = mobiscroll.popup('#demo-event-color', {\n    display: 'bottom',\n    contentPadding: false,\n    showArrow: false,\n    showOverlay: false,\n    buttons: [\n        'cancel',\n        {\n            text: 'Set',\n            keyCode: 'enter',\n            handler: function (ev) {\n                setSelectedColor();\n            },\n            cssClass: 'mbsc-popup-button-primary'\n        }\n    ],\n    responsive: {\n        medium: {\n            display: 'anchored',\n            anchor: document.getElementById('event-color-cont'),\n            buttons: {}\n        }\n    }\n});\n\nfunction selectColor(color, setColor) {\n    var selectedElm = document.querySelector('.crud-color-c.selected');\n    var newSelected = document.querySelector('.crud-color-c[data-value=\"' + color + '\"]');\n\n    if (selectedElm) {\n        selectedElm.classList.remove('selected')\n    }\n    if (newSelected) {\n        newSelected.classList.add('selected')\n    }\n    if (setColor) {\n        pickedColor.style.background = color || '';\n    }\n}\n\nfunction setSelectedColor() {\n    tempEvent.color = tempColor;\n    pickedColor.style.background = tempColor;\n    colorPicker.close();\n}\n\ncolorSelect.addEventListener('click', function () {\n    selectColor(tempEvent.color || '');\n    colorPicker.open();\n});\n\ncolorElms.forEach(function (elm) {\n    elm.addEventListener('click', function () {\n        tempColor = elm.getAttribute('data-value');\n        selectColor(tempColor);\n\n        if (!colorPicker.s.buttons.length) {\n            setSelectedColor();\n        }\n    });\n});\nbtnNotes.onclick=function(){\n  ChangeForm(notesForm)\n}\n",
  "setFocusID": "",
  "style": "",
  "theme": "",
  "top": "0",
  "width": "320",
  "_functions": [
    {
      "!type": "Form",
      "_uuid": "3b1c7bb8e9934de48312b70167a04cfc",
      "cached_js": "",
      "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e",
      "children": [],
      "expanded_pmp": true,
      "id": "createAddPopup",
      "location": [
        70,
        71
      ],
      "script": "",
      "signature": "function createAddPopup(elm) {"
    },
    {
      "!type": "Form",
      "_uuid": "fe324a060e76441fbaa7a7b389af6104",
      "cached_js": "",
      "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e",
      "children": [],
      "expanded_pmp": true,
      "id": "createEditPopup",
      "location": [
        119,
        120
      ],
      "script": "",
      "signature": "function createEditPopup(args) {"
    },
    {
      "!type": "Form",
      "_uuid": "ac7d98d9a4f24048ae02d5cf8e4ea73e",
      "cached_js": "",
      "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e",
      "children": [],
      "expanded_pmp": true,
      "id": "selectColor",
      "location": [
        326,
        327
      ],
      "script": "",
      "signature": "function selectColor(color, setColor) {"
    },
    {
      "!type": "Form",
      "_uuid": "8c4c184a353a40b9b61c2b6e07c4fb45",
      "cached_js": "",
      "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e",
      "children": [],
      "expanded_pmp": true,
      "id": "setSelectedColor",
      "location": [
        341,
        342
      ],
      "script": "",
      "signature": "function setSelectedColor() {"
    },
    {
      "!type": "Form",
      "_uuid": "a983770bf7644478a4f926f73677d5e0",
      "cached_js": "",
      "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e",
      "children": [],
      "expanded_pmp": true,
      "id": "btnNotes.onclick",
      "location": [
        362,
        363
      ],
      "script": "",
      "signature": "btnNotes.onclick()"
    }
  ]
}